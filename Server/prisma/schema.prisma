// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  name        String?
  propic      String?
  coverpic    String?
  role        String @default("user")
  bio         String?
  hobby       String?
  address     String?
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[] @relation(name: "UserReviews")
}

model Restaurant {
  id            String   @id @default(cuid())
  name          String
  description   String
  location      String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reviews       Review[] @relation(name: "RestaurantReviews")

  RestaurantCategory RestaurantCategory[]
}

model Review {
  id            String   @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], name: "UserReviews")
  userId        String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], name: "RestaurantReviews")
  restaurantId  String
}

model RestaurantCategory {
  id            String   @id @default(cuid())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Category {
  id            String   @id @default(cuid())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  restaurants   RestaurantCategory[]
}

model Message {
  id            Int      @id @default(autoincrement())
  matchId       Int
  senderId      Int
  receiverId    Int
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([matchId])
  @@index([senderId])
  @@index([receiverId])
}

model Match {
  id          Int      @id @default(autoincrement())
  user1Id     Int
  user2Id     Int
  createdAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status      String   @default("active")

  @@index([user1Id])
  @@index([user2Id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  content     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model Image {
  id          Int      @id @default(autoincrement())
  userId      Int
  assetId     String
  publicId    String
  url         String
  secureUrl   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}